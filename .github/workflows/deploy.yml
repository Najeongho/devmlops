name: Build, Push, and Deploy

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_WEB: web-repo
  ECR_REPOSITORY_WAS: was-repo
  ECR_REPOSITORY_DB: db-repo
  ECS_CLUSTER: ecs-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  ECS_SERVICE: ecs-service

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      id: build-images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push Web image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG ./msa/web
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG
        echo "web_image=$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        # Build and push WAS image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WAS:$IMAGE_TAG ./msa/was
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WAS:$IMAGE_TAG
        echo "was_image=$ECR_REGISTRY/$ECR_REPOSITORY_WAS:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        # Build and push DB image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG ./msa/db
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG
        echo "db_image=$ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image IDs in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: web-container
        image: ${{ steps.build-images.outputs.web_image }}

    - name: Update WAS container in task definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container-name: was-container
        image: ${{ steps.build-images.outputs.was_image }}

    - name: Update DB container in task definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container-name: db-container
        image: ${{ steps.build-images.outputs.db_image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get ECS Service URL
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text)
        NETWORK_INTERFACE_ID=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo "Web Endpoint: http://$PUBLIC_IP"