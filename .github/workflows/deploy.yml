name: Build, Push, and Deploy

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 347880001135.dkr.ecr.ap-northeast-2.amazonaws.com
  EC2_INSTANCE_TYPE: t3.large
  EC2_KEY_PAIR: vm-key-pair

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Web image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: web-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./msa/web
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, tag, and push WAS image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: was-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./msa/was
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, tag, and push DB image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: db-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./msa/db
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create EC2 instance
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-0f7712b35774b7da2 \
          --instance-type ${{ env.EC2_INSTANCE_TYPE }} \
          --key-name ${{ env.EC2_KEY_PAIR }} \
          --security-group-ids sg-07b5059125e8797e5 \
          --subnet-id subnet-009a55e7a3f6f1a72 \
          --associate-public-ip-address \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyInstance}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Wait for EC2 instance to be ready
      run: |
        aws ec2 wait instance-status-ok --instance-ids ${{ env.EC2_INSTANCE_ID }}

    - name: Get EC2 instance public IP
      run: |
        EC2_PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

    - name: Install Docker on EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} '
          sudo yum update -y
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
        '

    - name: Deploy containers
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} '
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          docker pull ${{ env.ECR_REGISTRY }}/web-repo:${{ github.sha }}
          docker pull ${{ env.ECR_REGISTRY }}/was-repo:${{ github.sha }}
          docker pull ${{ env.ECR_REGISTRY }}/db-repo:${{ github.sha }}
          
          docker network create mynetwork
          
          docker run -d --name db --network mynetwork ${{ env.ECR_REGISTRY }}/db-repo:${{ github.sha }}
          docker run -d --name was --network mynetwork ${{ env.ECR_REGISTRY }}/was-repo:${{ github.sha }}
          docker run -d --name web -p 80:80 --network mynetwork ${{ env.ECR_REGISTRY }}/web-repo:${{ github.sha }}
        '

    - name: Output Web endpoint
      run: |
        echo "Web endpoint: http://${{ env.EC2_PUBLIC_IP }}"